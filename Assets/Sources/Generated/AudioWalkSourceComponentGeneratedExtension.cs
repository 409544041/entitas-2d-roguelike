//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public AudioWalkSourceComponent audioWalkSource { get { return (AudioWalkSourceComponent)GetComponent(ComponentIds.AudioWalkSource); } }

        public bool hasAudioWalkSource { get { return HasComponent(ComponentIds.AudioWalkSource); } }

        public Entity AddAudioWalkSource(Audio[] newClips, bool newRandomizePitch) {
            var component = CreateComponent<AudioWalkSourceComponent>(ComponentIds.AudioWalkSource);
            component.clips = newClips;
            component.randomizePitch = newRandomizePitch;
            return AddComponent(ComponentIds.AudioWalkSource, component);
        }

        public Entity ReplaceAudioWalkSource(Audio[] newClips, bool newRandomizePitch) {
            var component = CreateComponent<AudioWalkSourceComponent>(ComponentIds.AudioWalkSource);
            component.clips = newClips;
            component.randomizePitch = newRandomizePitch;
            ReplaceComponent(ComponentIds.AudioWalkSource, component);
            return this;
        }

        public Entity RemoveAudioWalkSource() {
            return RemoveComponent(ComponentIds.AudioWalkSource);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherAudioWalkSource;

        public static IMatcher AudioWalkSource {
            get {
                if (_matcherAudioWalkSource == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.AudioWalkSource);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherAudioWalkSource = matcher;
                }

                return _matcherAudioWalkSource;
            }
        }
    }
}
