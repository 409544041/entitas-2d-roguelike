//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        static readonly NextTurnComponent nextTurnComponent = new NextTurnComponent();

        public bool isNextTurn {
            get { return HasComponent(ComponentIds.NextTurn); }
            set {
                if (value != isNextTurn) {
                    if (value) {
                        AddComponent(ComponentIds.NextTurn, nextTurnComponent);
                    } else {
                        RemoveComponent(ComponentIds.NextTurn);
                    }
                }
            }
        }

        public Entity IsNextTurn(bool value) {
            isNextTurn = value;
            return this;
        }
    }

    public partial class Pool {
        public Entity nextTurnEntity { get { return GetGroup(Matcher.NextTurn).GetSingleEntity(); } }

        public bool isNextTurn {
            get { return nextTurnEntity != null; }
            set {
                var entity = nextTurnEntity;
                if (value != (entity != null)) {
                    if (value) {
                        CreateEntity().isNextTurn = true;
                    } else {
                        DestroyEntity(entity);
                    }
                }
            }
        }
    }

    public partial class Matcher {
        static IMatcher _matcherNextTurn;

        public static IMatcher NextTurn {
            get {
                if (_matcherNextTurn == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.NextTurn);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherNextTurn = matcher;
                }

                return _matcherNextTurn;
            }
        }
    }
}
