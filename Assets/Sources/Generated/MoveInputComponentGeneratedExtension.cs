//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public MoveInputComponent moveInput { get { return (MoveInputComponent)GetComponent(ComponentIds.MoveInput); } }

        public bool hasMoveInput { get { return HasComponent(ComponentIds.MoveInput); } }

        public Entity AddMoveInput(Movement newMovement) {
            var component = CreateComponent<MoveInputComponent>(ComponentIds.MoveInput);
            component.movement = newMovement;
            return AddComponent(ComponentIds.MoveInput, component);
        }

        public Entity ReplaceMoveInput(Movement newMovement) {
            var component = CreateComponent<MoveInputComponent>(ComponentIds.MoveInput);
            component.movement = newMovement;
            ReplaceComponent(ComponentIds.MoveInput, component);
            return this;
        }

        public Entity RemoveMoveInput() {
            return RemoveComponent(ComponentIds.MoveInput);
        }
    }

    public partial class Pool {
        public Entity moveInputEntity { get { return GetGroup(Matcher.MoveInput).GetSingleEntity(); } }

        public MoveInputComponent moveInput { get { return moveInputEntity.moveInput; } }

        public bool hasMoveInput { get { return moveInputEntity != null; } }

        public Entity SetMoveInput(Movement newMovement) {
            if (hasMoveInput) {
                throw new EntitasException("Could not set moveInput!\n" + this + " already has an entity with MoveInputComponent!",
                    "You should check if the pool already has a moveInputEntity before setting it or use pool.ReplaceMoveInput().");
            }
            var entity = CreateEntity();
            entity.AddMoveInput(newMovement);
            return entity;
        }

        public Entity ReplaceMoveInput(Movement newMovement) {
            var entity = moveInputEntity;
            if (entity == null) {
                entity = SetMoveInput(newMovement);
            } else {
                entity.ReplaceMoveInput(newMovement);
            }

            return entity;
        }

        public void RemoveMoveInput() {
            DestroyEntity(moveInputEntity);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherMoveInput;

        public static IMatcher MoveInput {
            get {
                if (_matcherMoveInput == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.MoveInput);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherMoveInput = matcher;
                }

                return _matcherMoveInput;
            }
        }
    }
}
