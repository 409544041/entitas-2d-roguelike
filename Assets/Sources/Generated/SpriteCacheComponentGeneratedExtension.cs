//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public SpriteCacheComponent spriteCache { get { return (SpriteCacheComponent)GetComponent(ComponentIds.SpriteCache); } }

        public bool hasSpriteCache { get { return HasComponent(ComponentIds.SpriteCache); } }

        public Entity AddSpriteCache(System.Collections.Generic.IDictionary<string, UnityEngine.Sprite> newValue) {
            var component = CreateComponent<SpriteCacheComponent>(ComponentIds.SpriteCache);
            component.value = newValue;
            return AddComponent(ComponentIds.SpriteCache, component);
        }

        public Entity ReplaceSpriteCache(System.Collections.Generic.IDictionary<string, UnityEngine.Sprite> newValue) {
            var component = CreateComponent<SpriteCacheComponent>(ComponentIds.SpriteCache);
            component.value = newValue;
            ReplaceComponent(ComponentIds.SpriteCache, component);
            return this;
        }

        public Entity RemoveSpriteCache() {
            return RemoveComponent(ComponentIds.SpriteCache);
        }
    }

    public partial class Pool {
        public Entity spriteCacheEntity { get { return GetGroup(Matcher.SpriteCache).GetSingleEntity(); } }

        public SpriteCacheComponent spriteCache { get { return spriteCacheEntity.spriteCache; } }

        public bool hasSpriteCache { get { return spriteCacheEntity != null; } }

        public Entity SetSpriteCache(System.Collections.Generic.IDictionary<string, UnityEngine.Sprite> newValue) {
            if (hasSpriteCache) {
                throw new EntitasException("Could not set spriteCache!\n" + this + " already has an entity with SpriteCacheComponent!",
                    "You should check if the pool already has a spriteCacheEntity before setting it or use pool.ReplaceSpriteCache().");
            }
            var entity = CreateEntity();
            entity.AddSpriteCache(newValue);
            return entity;
        }

        public Entity ReplaceSpriteCache(System.Collections.Generic.IDictionary<string, UnityEngine.Sprite> newValue) {
            var entity = spriteCacheEntity;
            if (entity == null) {
                entity = SetSpriteCache(newValue);
            } else {
                entity.ReplaceSpriteCache(newValue);
            }

            return entity;
        }

        public void RemoveSpriteCache() {
            DestroyEntity(spriteCacheEntity);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherSpriteCache;

        public static IMatcher SpriteCache {
            get {
                if (_matcherSpriteCache == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.SpriteCache);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherSpriteCache = matcher;
                }

                return _matcherSpriteCache;
            }
        }
    }
}
