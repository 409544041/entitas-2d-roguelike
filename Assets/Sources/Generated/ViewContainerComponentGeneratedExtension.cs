//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public ViewContainerComponent viewContainer { get { return (ViewContainerComponent)GetComponent(ComponentIds.ViewContainer); } }

        public bool hasViewContainer { get { return HasComponent(ComponentIds.ViewContainer); } }

        public Entity AddViewContainer(UnityEngine.Transform newValue) {
            var component = CreateComponent<ViewContainerComponent>(ComponentIds.ViewContainer);
            component.value = newValue;
            return AddComponent(ComponentIds.ViewContainer, component);
        }

        public Entity ReplaceViewContainer(UnityEngine.Transform newValue) {
            var component = CreateComponent<ViewContainerComponent>(ComponentIds.ViewContainer);
            component.value = newValue;
            ReplaceComponent(ComponentIds.ViewContainer, component);
            return this;
        }

        public Entity RemoveViewContainer() {
            return RemoveComponent(ComponentIds.ViewContainer);
        }
    }

    public partial class Pool {
        public Entity viewContainerEntity { get { return GetGroup(Matcher.ViewContainer).GetSingleEntity(); } }

        public ViewContainerComponent viewContainer { get { return viewContainerEntity.viewContainer; } }

        public bool hasViewContainer { get { return viewContainerEntity != null; } }

        public Entity SetViewContainer(UnityEngine.Transform newValue) {
            if (hasViewContainer) {
                throw new EntitasException("Could not set viewContainer!\n" + this + " already has an entity with ViewContainerComponent!",
                    "You should check if the pool already has a viewContainerEntity before setting it or use pool.ReplaceViewContainer().");
            }
            var entity = CreateEntity();
            entity.AddViewContainer(newValue);
            return entity;
        }

        public Entity ReplaceViewContainer(UnityEngine.Transform newValue) {
            var entity = viewContainerEntity;
            if (entity == null) {
                entity = SetViewContainer(newValue);
            } else {
                entity.ReplaceViewContainer(newValue);
            }

            return entity;
        }

        public void RemoveViewContainer() {
            DestroyEntity(viewContainerEntity);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherViewContainer;

        public static IMatcher ViewContainer {
            get {
                if (_matcherViewContainer == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.ViewContainer);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherViewContainer = matcher;
                }

                return _matcherViewContainer;
            }
        }
    }
}
