//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public FoodBagComponent foodBag { get { return (FoodBagComponent)GetComponent(ComponentIds.FoodBag); } }

        public bool hasFoodBag { get { return HasComponent(ComponentIds.FoodBag); } }

        public Entity AddFoodBag(int newPoints) {
            var component = CreateComponent<FoodBagComponent>(ComponentIds.FoodBag);
            component.points = newPoints;
            return AddComponent(ComponentIds.FoodBag, component);
        }

        public Entity ReplaceFoodBag(int newPoints) {
            var component = CreateComponent<FoodBagComponent>(ComponentIds.FoodBag);
            component.points = newPoints;
            ReplaceComponent(ComponentIds.FoodBag, component);
            return this;
        }

        public Entity RemoveFoodBag() {
            return RemoveComponent(ComponentIds.FoodBag);
        }
    }

    public partial class Pool {
        public Entity foodBagEntity { get { return GetGroup(Matcher.FoodBag).GetSingleEntity(); } }

        public FoodBagComponent foodBag { get { return foodBagEntity.foodBag; } }

        public bool hasFoodBag { get { return foodBagEntity != null; } }

        public Entity SetFoodBag(int newPoints) {
            if (hasFoodBag) {
                throw new EntitasException("Could not set foodBag!\n" + this + " already has an entity with FoodBagComponent!",
                    "You should check if the pool already has a foodBagEntity before setting it or use pool.ReplaceFoodBag().");
            }
            var entity = CreateEntity();
            entity.AddFoodBag(newPoints);
            return entity;
        }

        public Entity ReplaceFoodBag(int newPoints) {
            var entity = foodBagEntity;
            if (entity == null) {
                entity = SetFoodBag(newPoints);
            } else {
                entity.ReplaceFoodBag(newPoints);
            }

            return entity;
        }

        public void RemoveFoodBag() {
            DestroyEntity(foodBagEntity);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherFoodBag;

        public static IMatcher FoodBag {
            get {
                if (_matcherFoodBag == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.FoodBag);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherFoodBag = matcher;
                }

                return _matcherFoodBag;
            }
        }
    }
}
